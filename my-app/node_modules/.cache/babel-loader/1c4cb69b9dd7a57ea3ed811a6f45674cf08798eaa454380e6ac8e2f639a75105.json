{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidan\\\\Desktop\\\\React-Resizable-Tic-Tac-Toe-and-Co-Caro\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/// Ideas\n/// 1) DONE make winning calculation not hardcoded to adjust board size (3x3, 4x4, 8x8...)\n/// 2) DONE and adjust how many in a row to win (3, 4, 5) to not be hardcoded\n/// 3) add toggles (drop down list?) to adjust board size / how many in a row to win\n/// 4) add co caro blocked rule?\n/// 5) DONE Display the location for each move in the format (row, col) in the move history list.\n/// 6) When someone wins, highlight the X squares that caused the win\n\n// to use state\nimport { useState } from 'react';\n\n// takes \"props\" value and onSquareClick\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  // curly braces let us use javascript, inside the JSX\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    \"background-color\": \"powderblue\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 10\n  }, this);\n}\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay,\n  rowColLength\n}) {\n  function handleClick(i) {\n    if (squares[i] || calculateWinner(squares, rowColLength)) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    onPlay(nextSquares);\n  }\n  const winner = calculateWinner(squares, rowColLength);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n\n    // Implement draw condition\n  } else if (!squares.includes(null)) {\n    status = \"The game is a draw.\";\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  // vars for storing div rows, and Square elements\n  let rowList = [];\n  let squareList = [];\n\n  // loop creates div rows and Square children by pushing to array vars, based on row/column size\n  for (let i = 0; i < rowColLength ** 2; i++) {\n    // push Square element to array of squares\n    squareList.push( /*#__PURE__*/_jsxDEV(Square, {\n      value: squares[i],\n      onSquareClick: () => handleClick(i)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 21\n    }, this));\n    if ((i + 1) % rowColLength === 0 && i > 0) {\n      // when a full row is complete, push the squares as children to the div\n      rowList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: squareList\n      }, (i + 1) / rowColLength, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 20\n      }, this));\n\n      // clear the array of squares for the next div/row\n      squareList = [];\n    }\n  }\n\n  // return our created row/board\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), rowList]\n  }, void 0, true);\n}\n_c2 = Board;\nexport default function Game() {\n  _s();\n  // var for storing row/col length\n  let rowColLength = 8;\n  const [history, setHistory] = useState([Array(rowColLength ** 2).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n  const [descMovesList, setDescMovesList] = useState(0);\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  // button function. Changes current move.\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  // button function. Reverses the order of moves.\n  function toggleSort() {\n    setDescMovesList(!descMovesList);\n  }\n  const moves = history.map((squares, move) => {\n    let description;\n    let rowColPos = []; // holds the calculated [row, col] position of the move\n\n    if (move > 0) {\n      // loop finds out what position the move was made at by checking where the difference in the prior history array position is\n      for (let i = 0; i < history[move].length; i++) {\n        if (history[move][i] != history[move - 1][i]) {\n          // now that the position is found, calculate the row and column position\n          rowColPos.push(Math.ceil((i + 1) / rowColLength));\n          rowColPos.push(i % rowColLength + 1);\n          break;\n        }\n      }\n      description = 'Go to move #' + move + \" (\" + rowColPos[0] + \", \" + rowColPos[1] + \")\";\n    } else {\n      description = 'Go to game start';\n    }\n\n    // check if not the current move, and return a button to jump to that move, if not\n    if (move != currentMove) {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => jumpTo(move),\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this);\n\n      // else, if it is the current move, show text that we are at the current move (or game start)\n    } else {\n      return (\n        /*#__PURE__*/\n        // put inline CSS styling to remove number from current position, and special condition for game start (move 0).\n        _jsxDEV(\"li\", {\n          style: {\n            listStyleType: \"none\"\n          },\n          children: [\"You are at \", currentMove == 0 ? \"game start.\" : \"move #\" + move + \" (\" + rowColPos[0] + \", \" + rowColPos[1] + \")\"]\n        }, move, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 9\n        }, this)\n      );\n    }\n  });\n  if (descMovesList) {\n    moves.reverse();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xIsNext: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay,\n        rowColLength: rowColLength\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"ol\", {\n        reversed: descMovesList,\n        children: [\" \", moves, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            listStyleType: \"none\"\n          },\n          onClick: () => toggleSort(),\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            children: [\"Toggle list to \", descMovesList ? \"ascending\" : \"descending\", \" order.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 81\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 14\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"MO10epMtEgyL9PaO55SpWbw4oZg=\");\n_c3 = Game;\nfunction calculateWinner(squares, rowColLength) {\n  // number of Xs/Os in a row required to win\n  let requiredToWin = 5;\n  // array that holds the winning lines (array positions)\n  const lines = [];\n  // array that holds one specific line that can win\n  let winningLine = [];\n\n  // loop determines all row (horizontal) winning combinations\n  for (let i = 0; i < rowColLength ** 2; i++) {\n    winningLine.push(i);\n\n    // push a winning line to array if the array size is equal to how many positions are required to win\n    if (winningLine.length === requiredToWin) {\n      lines.push(winningLine);\n      winningLine = [];\n    }\n\n    // reset i if there are more winning combinations possible on a row\n    if (winningLine.length === 0 && (i + 1) % rowColLength != 0) {\n      i -= requiredToWin - 1;\n    }\n  }\n  winningLine = [];\n\n  // loop determines all column (vertical) winning combinations\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength) {\n    winningLine.push(i);\n\n    // push a winning line to array if the array size is equal to how many positions are required to win\n    if (winningLine.length === requiredToWin) {\n      lines.push(winningLine);\n      winningLine = [];\n    }\n\n    // reset i if there are more winning combinations possible on a row\n    if (winningLine.length === 0) {\n      i -= rowColLength * requiredToWin - 1;\n    }\n  }\n  winningLine = [];\n\n  // loop determines diagonal winning combinations from left to right\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength + 1) {\n    winningLine.push(i);\n\n    // push a winning line to array if the array size is equal to how many positions are required to win\n    if (winningLine.length === requiredToWin) {\n      lines.push(winningLine);\n      winningLine = [];\n    }\n\n    // if the next potential diagonal spot is actually 2 rows down (not in the diagonal) then give up on this diagonal\n    if (Math.ceil((i + rowColLength + 2) / rowColLength) - Math.ceil((i + 1) / rowColLength) > 1 && winningLine.length > 0) {\n      i = winningLine[0] + 1 - (rowColLength + 1);\n      winningLine = [];\n      continue;\n    }\n\n    // reset i to next starting square after successful diagonal found\n    if (winningLine.length === 0) {\n      i -= (rowColLength + 1) * requiredToWin - 1;\n    }\n  }\n  winningLine = [];\n\n  // loop determines diagonal winning combinations from right to left\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength - 1) {\n    winningLine.push(i);\n\n    // push a winning line to array if the array size is equal to how many positions are required to win\n    if (winningLine.length === requiredToWin) {\n      lines.push(winningLine);\n      winningLine = [];\n    }\n\n    // if the next potential diagonal spot is actually on the same row (not in the diagonal) then give up on this diagonal\n    if (Math.ceil((i + rowColLength) / rowColLength) - Math.ceil((i + 1) / rowColLength) < 1 && winningLine.length > 0) {\n      i = winningLine[0] + 1 - rowColLength + 1;\n      winningLine = [];\n      continue;\n    }\n\n    // reset i to next starting square after successful diagonal found\n    if (winningLine.length === 0) {\n      i -= (rowColLength - 1) * requiredToWin - 1;\n    }\n  }\n\n  // check win condition\n  let checkWinner = [];\n  // fill checkWinner array with squares (X/O) values of possible winning lines\n  for (let i = 0; i < lines.length; i++) {\n    for (let j = 0; j < lines[i].length; j++) {\n      if (squares[lines[i][j]]) {\n        checkWinner.push(squares[lines[i][j]]);\n      }\n    }\n    // count times X or O appears, and if 1 or the other is the required number to win, return which one wins\n    if (checkWinner.filter(x => x === \"X\").length === requiredToWin || checkWinner.filter(x => x === \"O\").length === requiredToWin) {\n      return squares[lines[i][0]];\n    }\n    // reset checkWinner for the next line to check\n    checkWinner = [];\n  }\n\n  // if no winner, return null\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","rowColLength","handleClick","i","calculateWinner","nextSquares","slice","winner","status","includes","rowList","squareList","push","_c2","Game","_s","history","setHistory","Array","fill","currentMove","setCurrentMove","currentSquares","descMovesList","setDescMovesList","handlePlay","nextHistory","length","jumpTo","nextMove","toggleSort","moves","map","move","description","rowColPos","Math","ceil","style","listStyleType","reverse","reversed","_c3","requiredToWin","lines","winningLine","checkWinner","j","filter","x","$RefreshReg$"],"sources":["C:/Users/aidan/Desktop/React-Resizable-Tic-Tac-Toe-and-Co-Caro/my-app/src/App.js"],"sourcesContent":["/// Ideas\r\n/// 1) DONE make winning calculation not hardcoded to adjust board size (3x3, 4x4, 8x8...)\r\n/// 2) DONE and adjust how many in a row to win (3, 4, 5) to not be hardcoded\r\n/// 3) add toggles (drop down list?) to adjust board size / how many in a row to win\r\n/// 4) add co caro blocked rule?\r\n/// 5) DONE Display the location for each move in the format (row, col) in the move history list.\r\n/// 6) When someone wins, highlight the X squares that caused the win\r\n\r\n// to use state\r\nimport { useState } from 'react';\r\n\r\n// takes \"props\" value and onSquareClick\r\nfunction Square({ value, onSquareClick }) {\r\n\r\n  // curly braces let us use javascript, inside the JSX\r\n  return <button className=\"square\" background-color=\"powderblue\" onClick={onSquareClick}>{value}</button>\r\n}\r\n\r\nfunction Board({ xIsNext, squares, onPlay, rowColLength }) {\r\n\r\n  function handleClick(i) {\r\n\r\n    if (squares[i] || calculateWinner(squares, rowColLength)) {\r\n      return;\r\n    }\r\n\r\n    const nextSquares = squares.slice();\r\n\r\n    if (xIsNext) {\r\n      nextSquares[i] = \"X\";\r\n    } else {\r\n      nextSquares[i] = \"O\";\r\n    }\r\n    onPlay(nextSquares);\r\n  }\r\n\r\n  const winner = calculateWinner(squares, rowColLength);\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner;\r\n\r\n  // Implement draw condition\r\n  } else if (!squares.includes(null)) {\r\n    status = \"The game is a draw.\";\r\n  } else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  // vars for storing div rows, and Square elements\r\n  let rowList = [];\r\n  let squareList = [];\r\n\r\n  // loop creates div rows and Square children by pushing to array vars, based on row/column size\r\n  for (let i = 0; i < rowColLength ** 2; i++) {\r\n\r\n    // push Square element to array of squares\r\n    squareList.push(<Square key={i} value={squares[i]} onSquareClick={() => handleClick(i)} />);\r\n\r\n    if ((i + 1) % rowColLength === 0 && i > 0) {\r\n      // when a full row is complete, push the squares as children to the div\r\n      rowList.push(<div key={(i + 1) / rowColLength} className=\"board-row\">{squareList}</div>);\r\n\r\n      // clear the array of squares for the next div/row\r\n      squareList = [];\r\n    }\r\n  }\r\n\r\n  // return our created row/board\r\n  return (\r\n    <>\r\n      <div className=\"status\">{status}</div>\r\n      {rowList}\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nexport default function Game() {\r\n\r\n  // var for storing row/col length\r\n  let rowColLength = 8;\r\n  const [history, setHistory] = useState([Array(rowColLength ** 2).fill(null)]);\r\n  const [currentMove, setCurrentMove] = useState(0);\r\n  const xIsNext = currentMove % 2 === 0;\r\n  const currentSquares = history[currentMove];\r\n  const [descMovesList, setDescMovesList] = useState(0);\r\n\r\n  function handlePlay(nextSquares) {\r\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\r\n    setHistory(nextHistory);\r\n    setCurrentMove(nextHistory.length - 1);\r\n  }\r\n\r\n  // button function. Changes current move.\r\n  function jumpTo(nextMove) {\r\n    setCurrentMove(nextMove);\r\n  }\r\n\r\n  // button function. Reverses the order of moves.\r\n  function toggleSort() {\r\n    setDescMovesList(!descMovesList)\r\n  }\r\n\r\n  const moves = history.map((squares, move) => {\r\n    let description;\r\n    let rowColPos = []; // holds the calculated [row, col] position of the move\r\n\r\n    if (move > 0) {\r\n\r\n      // loop finds out what position the move was made at by checking where the difference in the prior history array position is\r\n      for (let i = 0; i < history[move].length; i++) {\r\n        if (history[move][i] != history[move - 1][i]) {\r\n          // now that the position is found, calculate the row and column position\r\n          rowColPos.push(Math.ceil((i + 1) / rowColLength));\r\n          rowColPos.push((i % rowColLength) + 1);\r\n          break;\r\n        }\r\n      }\r\n\r\n      description = 'Go to move #' + move + \" (\" + rowColPos[0] + \", \" + rowColPos[1] + \")\";\r\n    } else {\r\n      description = 'Go to game start';\r\n    }\r\n\r\n    // check if not the current move, and return a button to jump to that move, if not\r\n    if (move != currentMove) {\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move)}>{description}</button>\r\n        </li>\r\n      );\r\n\r\n      // else, if it is the current move, show text that we are at the current move (or game start)\r\n    } else {\r\n      return (\r\n        // put inline CSS styling to remove number from current position, and special condition for game start (move 0).\r\n        <li key={move} style={{ listStyleType: \"none\" }}>You are at {currentMove == 0 ? \"game start.\" : \"move #\" + move + \" (\" + rowColPos[0] + \", \" + rowColPos[1] + \")\"}</li>\r\n      );\r\n    }\r\n  });\r\n\r\n  if (descMovesList) {\r\n    moves.reverse();\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} rowColLength={rowColLength} />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        {/* Reverse the order of the list if descending order, as well. */}\r\n        <ol reversed={descMovesList}> {moves} </ol>\r\n        <ul> <li style={{ listStyleType: \"none\" }} onClick={() => toggleSort()}><button>Toggle list to {descMovesList ? \"ascending\" : \"descending\"} order.</button> </li> </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction calculateWinner(squares, rowColLength) {\r\n  // number of Xs/Os in a row required to win\r\n  let requiredToWin = 5;\r\n  // array that holds the winning lines (array positions)\r\n  const lines = [];\r\n  // array that holds one specific line that can win\r\n  let winningLine = []\r\n\r\n  // loop determines all row (horizontal) winning combinations\r\n  for (let i = 0; i < rowColLength ** 2; i++) {\r\n\r\n    winningLine.push(i);\r\n\r\n    // push a winning line to array if the array size is equal to how many positions are required to win\r\n    if (winningLine.length === requiredToWin) {\r\n      lines.push(winningLine);\r\n      winningLine = [];\r\n    }\r\n\r\n    // reset i if there are more winning combinations possible on a row\r\n    if (winningLine.length === 0 && (((i + 1) % rowColLength) != 0)) {\r\n      i -= (requiredToWin - 1);\r\n    }\r\n  }\r\n\r\n  winningLine = [];\r\n\r\n  // loop determines all column (vertical) winning combinations\r\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength) {\r\n\r\n    winningLine.push(i);\r\n\r\n    // push a winning line to array if the array size is equal to how many positions are required to win\r\n    if (winningLine.length === requiredToWin) {\r\n      lines.push(winningLine);\r\n      winningLine = [];\r\n    }\r\n\r\n    // reset i if there are more winning combinations possible on a row\r\n    if (winningLine.length === 0) {\r\n      i -= (rowColLength * requiredToWin) - 1;\r\n    }\r\n  }\r\n\r\n  winningLine = [];\r\n\r\n  // loop determines diagonal winning combinations from left to right\r\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength + 1) {\r\n\r\n    winningLine.push(i);\r\n\r\n    // push a winning line to array if the array size is equal to how many positions are required to win\r\n    if (winningLine.length === requiredToWin) {\r\n      lines.push(winningLine);\r\n      winningLine = [];\r\n    }\r\n\r\n    // if the next potential diagonal spot is actually 2 rows down (not in the diagonal) then give up on this diagonal\r\n    if (((Math.ceil((i + rowColLength + 2) / rowColLength) - Math.ceil((i + 1) / rowColLength)) > 1) && winningLine.length > 0) {\r\n      i = winningLine[0] + 1 - (rowColLength + 1);\r\n      winningLine = [];\r\n      continue;\r\n    }\r\n\r\n    // reset i to next starting square after successful diagonal found\r\n    if (winningLine.length === 0) {\r\n      i -= ((rowColLength + 1) * requiredToWin) - 1;\r\n    }\r\n  }\r\n\r\n  winningLine = [];\r\n\r\n  // loop determines diagonal winning combinations from right to left\r\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength - 1) {\r\n\r\n    winningLine.push(i);\r\n\r\n    // push a winning line to array if the array size is equal to how many positions are required to win\r\n    if (winningLine.length === requiredToWin) {\r\n      lines.push(winningLine);\r\n      winningLine = [];\r\n    }\r\n\r\n    // if the next potential diagonal spot is actually on the same row (not in the diagonal) then give up on this diagonal\r\n    if (((Math.ceil((i + rowColLength) / rowColLength) - Math.ceil((i + 1) / rowColLength)) < 1) && winningLine.length > 0) {\r\n      i = winningLine[0] + 1 - rowColLength + 1;\r\n      winningLine = [];\r\n      continue;\r\n    }\r\n\r\n    // reset i to next starting square after successful diagonal found\r\n    if (winningLine.length === 0) {\r\n      i -= ((rowColLength - 1) * requiredToWin) - 1;\r\n    }\r\n  }\r\n\r\n  // check win condition\r\n  let checkWinner = [];\r\n  // fill checkWinner array with squares (X/O) values of possible winning lines\r\n  for (let i = 0; i < lines.length; i++) {\r\n    for (let j = 0; j < lines[i].length; j++) {\r\n      if (squares[lines[i][j]]) {\r\n        checkWinner.push(squares[lines[i][j]]);\r\n      }\r\n    }\r\n    // count times X or O appears, and if 1 or the other is the required number to win, return which one wins\r\n    if (checkWinner.filter(x => x === \"X\").length === requiredToWin || checkWinner.filter(x => x === \"O\").length === requiredToWin) {\r\n      return squares[lines[i][0]];\r\n    }\r\n    // reset checkWinner for the next line to check\r\n    checkWinner = [];\r\n  }\r\n\r\n  // if no winner, return null\r\n  return null;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}