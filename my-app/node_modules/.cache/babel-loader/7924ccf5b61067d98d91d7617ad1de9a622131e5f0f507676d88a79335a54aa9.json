{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidan\\\\Desktop\\\\React-Resizable-Tic-Tac-Toe-and-Co-Caro\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/// Ideas\n/// 1) DONE make winning calculation not hardcoded to adjust board size (3x3, 4x4, 8x8...)\n/// 2) DONE and adjust how many in a row to win (3, 4, 5) to not be hardcoded\n/// 3) DONE add toggles (drop down list?) to adjust board size / how many in a row to win\n/// 4) DONE add co caro blocked rule?\n/// 5) DONE Display the location for each move in the format (row, col) in the move history list.\n/// 6) DONE When someone wins, highlight the X squares that caused the win\n/// 7) DONE disable select box\n/// 8) DONE add check box for blocked rule\n/// 9) let's make the select options in a loop, too\n/// 10) and implement on aidan-le-beard.github.io\n\n// to use state\nimport { useState } from 'react';\n\n// takes \"props\" value and onSquareClick\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick,\n  winningColor\n}) {\n  // curly braces let us use javascript, inside the JSX\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    style: {\n      backgroundColor: winningColor\n    },\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 10\n  }, this);\n}\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay,\n  rowColLength,\n  requiredToWin,\n  blockedRule\n}) {\n  function handleClick(i) {\n    if (squares[i] || calculateWinner(squares, rowColLength, requiredToWin, blockedRule)) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    onPlay(nextSquares);\n  }\n  const winner = calculateWinner(squares, rowColLength, requiredToWin, blockedRule);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + squares[winner[0]];\n\n    // Implement draw condition\n  } else if (squares.slice(0, rowColLength ** 2).filter(x => x).length === rowColLength ** 2) {\n    status = \"The game is a draw.\";\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  // if there's a winner, matches the winning indices returned to the index sent on Square creation, and returns blue on match\n  function returnColor(i) {\n    if (winner && winner.includes(i)) {\n      return 'lightskyblue';\n    }\n    return;\n  }\n\n  // vars for storing div rows, and Square elements\n  let rowList = [];\n  let squareList = [];\n\n  // loop creates div rows and Square children by pushing to array vars, based on row/column size\n  for (let i = 0; i < rowColLength ** 2; i++) {\n    // push Square element to array of squares\n    squareList.push( /*#__PURE__*/_jsxDEV(Square, {\n      value: squares[i],\n      winningColor: returnColor(i),\n      onSquareClick: () => handleClick(i)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }, this));\n    if ((i + 1) % rowColLength === 0 && i > 0) {\n      // when a full row is complete, push the squares as children to the div\n      rowList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: squareList\n      }, (i + 1) / rowColLength, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 20\n      }, this));\n\n      // clear the array of squares for the next div/row\n      squareList = [];\n    }\n  }\n\n  // return our created row/board\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), rowList]\n  }, void 0, true);\n}\n_c2 = Board;\nexport default function Game() {\n  _s();\n  // var for storing row/col length\n  const [rowColLength, setRowColLength] = useState(3);\n  // var for storing how many Xs/Os in a row required to win\n  const [requiredToWin, setRequiredToWin] = useState(3);\n  const [history, setHistory] = useState([Array(rowColLength ** 2).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n  // var for changing order of moves to be ascending/descending\n  const [descMovesList, setDescMovesList] = useState(0);\n  // var for storing if blocked rule is checked or not\n  const [blockedRule, setBlockedRule] = useState(false);\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  // button function. Changes current move.\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  // button function. Turns blocked rule off/on based on checkbox\n  function activateBlockedRule(value) {\n    setBlockedRule(!blockedRule);\n  }\n\n  // changes the board size\n  function changeBoardSize(value) {\n    // determine if a move is being pushed off the board when decreasing size, and jump to move 0, if so\n    let maxIndexPosition = 8;\n    for (let i = history[history.length - 1].length - 1; i > maxIndexPosition; i--) {\n      if (history[history.length - 1][i]) {\n        maxIndexPosition = i;\n        break;\n      }\n    }\n    if (value < rowColLength && maxIndexPosition > value ** 2 - 1) {\n      jumpTo(0);\n      // if all moves are back on board when increasing size, jump to last move\n    } else if (value > rowColLength && maxIndexPosition < value ** 2) {\n      jumpTo(history[history.length - 1].filter(x => x).length);\n    }\n    setRowColLength(value);\n  }\n\n  // button function. Reverses the order of moves.\n  function toggleSort() {\n    setDescMovesList(!descMovesList);\n  }\n\n  // changes how many in a row to win\n  function changeReqToWin(value) {\n    setRequiredToWin(value);\n  }\n\n  // to keep track of visible moves on the board/list\n  let counter = 0;\n  const moves = history.map((squares, move) => {\n    let description;\n    let rowColPos = []; // holds the calculated [row, col] position of the move\n    let rowColIndex = 0;\n    if (move > 0) {\n      // loop finds out what position the move was made at by checking where the difference in the prior history array position is\n      for (let i = 0; i < history[move].length; i++) {\n        if (history[move][i] != history[move - 1][i]) {\n          // now that the position is found, calculate the row and column position\n          rowColPos.push(Math.ceil((i + 1) / rowColLength));\n          rowColPos.push(i % rowColLength + 1);\n          rowColIndex = i;\n          break;\n        }\n      }\n      description = 'Go to move #' + counter + \" (\" + rowColPos[0] + \", \" + rowColPos[1] + \")\";\n    } else {\n      description = 'Go to game start';\n    }\n\n    // check if not the current move, and return a button to jump to that move, if not\n    if (move != currentMove && rowColIndex <= rowColLength ** 2) {\n      counter++;\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => jumpTo(move),\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this);\n\n      // else, if it is the current move, show text that we are at the current move (or game start)\n    } else if (rowColIndex <= rowColLength ** 2) {\n      try {\n        return (\n          /*#__PURE__*/\n          // put inline CSS styling to remove number from current position, and special condition for game start (move 0).\n          _jsxDEV(\"li\", {\n            style: {\n              listStyleType: \"none\"\n            },\n            children: [\"You are at \", currentMove == 0 ? \"game start.\" : \"move #\" + counter + \" (\" + rowColPos[0] + \", \" + rowColPos[1] + \")\"]\n          }, move, true, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 11\n          }, this)\n        );\n      } finally {\n        counter++;\n      }\n    } else {\n      return;\n    }\n  });\n  if (descMovesList) {\n    moves.reverse();\n  }\n\n  // create selects in a loop\n  let rowSelect = [];\n  let toWinSelect = [];\n\n  // loop creates div rows and Square children by pushing to array vars, based on row/column size\n  for (let i = 1; i < 23; i++) {\n    // push Square element to array of squares\n    rowSelect.push( /*#__PURE__*/_jsxDEV(\"option\", {\n      disabled: requiredToWin > {\n        i\n      },\n      value: i,\n      children: [i, \"x\", i]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 22\n    }, this));\n    console.log(rowSelect);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          xIsNext: xIsNext,\n          squares: currentSquares,\n          onPlay: handlePlay,\n          rowColLength: rowColLength,\n          requiredToWin: requiredToWin,\n          blockedRule: blockedRule\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"ol\", {\n          reversed: descMovesList,\n          children: [\" \", moves, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              listStyleType: \"none\"\n            },\n            onClick: () => toggleSort(),\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              children: [\"Toggle list to \", descMovesList ? \"ascending\" : \"descending\", \" order.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 83\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 16\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"rowColSelect\",\n          children: \"Choose board size:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"dropDown\",\n          id: \"rowColSelect\",\n          defaultValue: 3,\n          onChange: () => changeBoardSize(parseInt(rowColSelect.value)),\n          children: rowSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"reqToWinSelect\",\n          children: \"Choose how many in a row to win:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"dropDown\",\n          id: \"reqToWinSelect\",\n          defaultValue: 3,\n          onChange: () => changeReqToWin(parseInt(reqToWinSelect.value)),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"3\",\n            children: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: 4 > rowColLength,\n            value: \"4\",\n            children: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: 5 > rowColLength,\n            value: \"5\",\n            children: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: 6 > rowColLength,\n            value: \"6\",\n            children: \"6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: 7 > rowColLength,\n            value: \"7\",\n            children: \"7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: 8 > rowColLength,\n            value: \"8\",\n            children: \"8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: 9 > rowColLength,\n            value: \"9\",\n            children: \"9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            disabled: 10 > rowColLength,\n            value: \"10\",\n            children: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          defaultChecked: false,\n          onChange: () => activateBlockedRule()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 16\n        }, this), \"Blocked Rule (Co Caro)?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Game, \"Hs5IJswTgSvPa+gYnj6p5GE47V0=\");\n_c3 = Game;\nfunction calculateWinner(squares, rowColLength, requiredToWin, blockedRule) {\n  // array that holds the winning lines (array positions)\n  const lines = [];\n  // array that holds one specific line that can win\n  let winningLine = [];\n\n  // loop determines all row (horizontal) winning combinations\n  for (let i = 0; i < rowColLength ** 2; i++) {\n    winningLine.push(i);\n\n    // push a winning line to array if the array size is equal to how many positions are required to win\n    if (winningLine.length === requiredToWin) {\n      lines.push(winningLine);\n      winningLine = [];\n    }\n\n    // reset i if there are more winning combinations possible on a row\n    if (winningLine.length === 0 && (i + 1) % rowColLength != 0) {\n      i -= requiredToWin - 1;\n    }\n  }\n  winningLine = [];\n\n  // loop determines all column (vertical) winning combinations\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength) {\n    winningLine.push(i);\n\n    // push a winning line to array if the array size is equal to how many positions are required to win\n    if (winningLine.length === requiredToWin) {\n      lines.push(winningLine);\n      winningLine = [];\n    }\n\n    // reset i if there are more winning combinations possible on a row\n    if (winningLine.length === 0) {\n      i -= rowColLength * requiredToWin - 1;\n    }\n  }\n  winningLine = [];\n\n  // loop determines diagonal winning combinations from left to right\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength + 1) {\n    winningLine.push(i);\n\n    // push a winning line to array if the array size is equal to how many positions are required to win\n    if (winningLine.length === requiredToWin) {\n      lines.push(winningLine);\n      winningLine = [];\n    }\n\n    // if the next potential diagonal spot is actually 2 rows down (not in the diagonal) then give up on this diagonal\n    if (Math.ceil((i + rowColLength + 2) / rowColLength) - Math.ceil((i + 1) / rowColLength) > 1 && winningLine.length > 0) {\n      i = winningLine[0] + 1 - (rowColLength + 1);\n      winningLine = [];\n      continue;\n    }\n\n    // reset i to next starting square after successful diagonal found\n    if (winningLine.length === 0) {\n      i -= (rowColLength + 1) * requiredToWin - 1;\n    }\n  }\n  winningLine = [];\n\n  // loop determines diagonal winning combinations from right to left\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength - 1) {\n    winningLine.push(i);\n\n    // push a winning line to array if the array size is equal to how many positions are required to win\n    if (winningLine.length === requiredToWin) {\n      lines.push(winningLine);\n      winningLine = [];\n    }\n\n    // if the next potential diagonal spot is actually on the same row (not in the diagonal) then give up on this diagonal\n    if (Math.ceil((i + rowColLength) / rowColLength) - Math.ceil((i + 1) / rowColLength) < 1 && winningLine.length > 0) {\n      i = winningLine[0] + 1 - rowColLength + 1;\n      winningLine = [];\n      continue;\n    }\n\n    // reset i to next starting square after successful diagonal found\n    if (winningLine.length === 0) {\n      i -= (rowColLength - 1) * requiredToWin - 1;\n    }\n  }\n\n  // check win condition\n  let checkWinner = [];\n  // fill checkWinner array with squares (X/O) values of possible winning lines\n  for (let i = 0; i < lines.length; i++) {\n    for (let j = 0; j < lines[i].length; j++) {\n      if (squares[lines[i][j]]) {\n        checkWinner.push(squares[lines[i][j]]);\n      }\n    }\n    // count times X or O appears, and if 1 or the other is the required number to win, return which one wins\n    if ((checkWinner.filter(x => x === \"X\").length === requiredToWin || checkWinner.filter(x => x === \"O\").length === requiredToWin) && requiredToWin <= rowColLength) {\n      if (!blockedRule || !checkBlocked(lines[i], squares, rowColLength, requiredToWin)) {\n        return lines[i];\n      }\n    }\n    // reset checkWinner for the next line to check\n    checkWinner = [];\n  }\n\n  // if no winner, return null\n  return null;\n}\n\n// checks if both ends of a winning line are blocked by the opponent\nfunction checkBlocked(lines, squares, rowColLength, requiredToWin) {\n  // slice the array so we aren't mutating the original\n  let line = lines.slice();\n  // interval between all winning moves is equal; so the blocked positions will be on the same interval\n  let interval = line[1] - line[0];\n\n  // calculate what move the 2 blocking positions needs to be\n  let notWinner;\n  if (squares[line[0]] === \"X\") {\n    notWinner = \"O\";\n  } else {\n    notWinner = \"X\";\n  }\n\n  // add 2 blocking positions to the line\n  line.push(line[line.length - 1] + interval);\n  line.unshift(line[0] - interval);\n\n  // blocking cannot occur with invalid array positions or if the board isn't large enough, so return false\n  if (line[0] < 0 || line[line.length - 1] >= rowColLength ** 2 || rowColLength < requiredToWin + 2) {\n    return false;\n  }\n\n  // calculate row positions to make sure the blocking positions are in a continuous line with the winning line\n  let rowPos = [];\n  for (let i = 0; i < line.length; i++) {\n    rowPos.push(Math.ceil((line[i] + 1) / rowColLength));\n  }\n  // if the difference between rows is not consistent, it's not a straight line, so return false\n  let rowDiff = rowPos[2] - rowPos[1];\n  for (let i = 1; i < rowPos.length; i++) {\n    if (rowPos[i] - rowPos[i - 1] != rowDiff) {\n      return false;\n    }\n  }\n\n  // return true if both blocking squares are owned by the opponent\n  if (squares[line[0]] === notWinner && squares[line[line.length - 1]] === notWinner) {\n    return true;\n  }\n  return false;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","winningColor","className","style","backgroundColor","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","rowColLength","requiredToWin","blockedRule","handleClick","i","calculateWinner","nextSquares","slice","winner","status","filter","x","length","returnColor","includes","rowList","squareList","push","_c2","Game","_s","setRowColLength","setRequiredToWin","history","setHistory","Array","fill","currentMove","setCurrentMove","currentSquares","descMovesList","setDescMovesList","setBlockedRule","handlePlay","nextHistory","jumpTo","nextMove","activateBlockedRule","changeBoardSize","maxIndexPosition","toggleSort","changeReqToWin","counter","moves","map","move","description","rowColPos","rowColIndex","Math","ceil","listStyleType","reverse","rowSelect","toWinSelect","disabled","console","log","reversed","htmlFor","id","defaultValue","onChange","parseInt","rowColSelect","reqToWinSelect","type","defaultChecked","_c3","lines","winningLine","checkWinner","j","checkBlocked","line","interval","notWinner","unshift","rowPos","rowDiff","$RefreshReg$"],"sources":["C:/Users/aidan/Desktop/React-Resizable-Tic-Tac-Toe-and-Co-Caro/my-app/src/App.js"],"sourcesContent":["/// Ideas\r\n/// 1) DONE make winning calculation not hardcoded to adjust board size (3x3, 4x4, 8x8...)\r\n/// 2) DONE and adjust how many in a row to win (3, 4, 5) to not be hardcoded\r\n/// 3) DONE add toggles (drop down list?) to adjust board size / how many in a row to win\r\n/// 4) DONE add co caro blocked rule?\r\n/// 5) DONE Display the location for each move in the format (row, col) in the move history list.\r\n/// 6) DONE When someone wins, highlight the X squares that caused the win\r\n/// 7) DONE disable select box\r\n/// 8) DONE add check box for blocked rule\r\n/// 9) let's make the select options in a loop, too\r\n/// 10) and implement on aidan-le-beard.github.io\r\n\r\n// to use state\r\nimport { useState } from 'react';\r\n\r\n// takes \"props\" value and onSquareClick\r\nfunction Square({ value, onSquareClick, winningColor }) {\r\n\r\n  // curly braces let us use javascript, inside the JSX\r\n  return <button className=\"square\" style={{ backgroundColor: winningColor }} onClick={onSquareClick}>{value}</button>\r\n}\r\n\r\nfunction Board({ xIsNext, squares, onPlay, rowColLength, requiredToWin, blockedRule }) {\r\n\r\n  function handleClick(i) {\r\n\r\n    if (squares[i] || calculateWinner(squares, rowColLength, requiredToWin, blockedRule)) {\r\n      return;\r\n    }\r\n\r\n    const nextSquares = squares.slice();\r\n\r\n    if (xIsNext) {\r\n      nextSquares[i] = \"X\";\r\n    } else {\r\n      nextSquares[i] = \"O\";\r\n    }\r\n    onPlay(nextSquares);\r\n  }\r\n\r\n  const winner = calculateWinner(squares, rowColLength, requiredToWin, blockedRule);\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + squares[winner[0]];\r\n\r\n    // Implement draw condition\r\n  } else if (squares.slice(0, rowColLength ** 2).filter(x => x).length === rowColLength ** 2) {\r\n    status = \"The game is a draw.\";\r\n  } else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  // if there's a winner, matches the winning indices returned to the index sent on Square creation, and returns blue on match\r\n  function returnColor(i) {\r\n    if (winner && winner.includes(i)) {\r\n      return 'lightskyblue';\r\n    }\r\n    return;\r\n  }\r\n\r\n  // vars for storing div rows, and Square elements\r\n  let rowList = [];\r\n  let squareList = [];\r\n\r\n  // loop creates div rows and Square children by pushing to array vars, based on row/column size\r\n  for (let i = 0; i < rowColLength ** 2; i++) {\r\n\r\n    // push Square element to array of squares\r\n    squareList.push(<Square key={i} value={squares[i]} winningColor={returnColor(i)} onSquareClick={() => handleClick(i)} />);\r\n\r\n    if ((i + 1) % rowColLength === 0 && i > 0) {\r\n      // when a full row is complete, push the squares as children to the div\r\n      rowList.push(<div key={(i + 1) / rowColLength} className=\"board-row\">{squareList}</div>);\r\n\r\n      // clear the array of squares for the next div/row\r\n      squareList = [];\r\n    }\r\n  }\r\n\r\n  // return our created row/board\r\n  return (\r\n    <>\r\n      <div className=\"status\">{status}</div>\r\n      {rowList}\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nexport default function Game() {\r\n\r\n  // var for storing row/col length\r\n  const [rowColLength, setRowColLength] = useState(3);\r\n  // var for storing how many Xs/Os in a row required to win\r\n  const [requiredToWin, setRequiredToWin] = useState(3);\r\n  const [history, setHistory] = useState([Array(rowColLength ** 2).fill(null)]);\r\n  const [currentMove, setCurrentMove] = useState(0);\r\n  const xIsNext = currentMove % 2 === 0;\r\n  const currentSquares = history[currentMove];\r\n  // var for changing order of moves to be ascending/descending\r\n  const [descMovesList, setDescMovesList] = useState(0);\r\n  // var for storing if blocked rule is checked or not\r\n  const [blockedRule, setBlockedRule] = useState(false);\r\n\r\n  function handlePlay(nextSquares) {\r\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\r\n    setHistory(nextHistory);\r\n    setCurrentMove(nextHistory.length - 1);\r\n  }\r\n\r\n  // button function. Changes current move.\r\n  function jumpTo(nextMove) {\r\n    setCurrentMove(nextMove);\r\n  }\r\n\r\n  // button function. Turns blocked rule off/on based on checkbox\r\n  function activateBlockedRule(value) {\r\n    setBlockedRule(!blockedRule);\r\n  }\r\n\r\n  // changes the board size\r\n  function changeBoardSize(value) {\r\n\r\n    // determine if a move is being pushed off the board when decreasing size, and jump to move 0, if so\r\n    let maxIndexPosition = 8;\r\n    for (let i = history[history.length - 1].length - 1; i > maxIndexPosition; i--) {\r\n      if (history[history.length - 1][i]) {\r\n        maxIndexPosition = i;\r\n        break;\r\n      }\r\n    }\r\n    if (value < rowColLength && maxIndexPosition > value ** 2 - 1) {\r\n      jumpTo(0);\r\n    // if all moves are back on board when increasing size, jump to last move\r\n    } else if (value > rowColLength && maxIndexPosition < value ** 2) {\r\n      jumpTo(history[history.length - 1].filter(x => x).length);\r\n    }\r\n\r\n    setRowColLength(value);\r\n  }\r\n\r\n  // button function. Reverses the order of moves.\r\n  function toggleSort() {\r\n    setDescMovesList(!descMovesList)\r\n  }\r\n\r\n  // changes how many in a row to win\r\n  function changeReqToWin(value) {\r\n    setRequiredToWin(value);\r\n  }\r\n\r\n  // to keep track of visible moves on the board/list\r\n  let counter = 0;\r\n  const moves = history.map((squares, move) => {\r\n    let description;\r\n    let rowColPos = []; // holds the calculated [row, col] position of the move\r\n    let rowColIndex = 0;\r\n\r\n    if (move > 0) {\r\n\r\n      // loop finds out what position the move was made at by checking where the difference in the prior history array position is\r\n      for (let i = 0; i < history[move].length; i++) {\r\n        if (history[move][i] != history[move - 1][i]) {\r\n          // now that the position is found, calculate the row and column position\r\n          rowColPos.push(Math.ceil((i + 1) / rowColLength));\r\n          rowColPos.push((i % rowColLength) + 1);\r\n          rowColIndex = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      description = 'Go to move #' + counter + \" (\" + rowColPos[0] + \", \" + rowColPos[1] + \")\";\r\n    } else {\r\n      description = 'Go to game start';\r\n    }\r\n\r\n    // check if not the current move, and return a button to jump to that move, if not\r\n    if (move != currentMove && rowColIndex <= rowColLength ** 2) {\r\n      counter++;\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move)}>{description}</button>\r\n        </li>\r\n      );\r\n\r\n      // else, if it is the current move, show text that we are at the current move (or game start)\r\n    } else if (rowColIndex <= rowColLength ** 2) {\r\n      try {\r\n        return (\r\n          // put inline CSS styling to remove number from current position, and special condition for game start (move 0).\r\n          <li key={move} style={{ listStyleType: \"none\" }}>You are at {currentMove == 0 ? \"game start.\" : \"move #\" + counter + \" (\" + rowColPos[0] + \", \" + rowColPos[1] + \")\"}</li>\r\n        );\r\n      } finally {\r\n        counter++;\r\n      }\r\n    } else {\r\n      return;\r\n    }\r\n  });\r\n\r\n  if (descMovesList) {\r\n    moves.reverse();\r\n  }\r\n\r\n    // create selects in a loop\r\n    let rowSelect = [];\r\n    let toWinSelect = [];\r\n  \r\n    // loop creates div rows and Square children by pushing to array vars, based on row/column size\r\n    for (let i = 1; i < 23; i++) {\r\n  \r\n      // push Square element to array of squares\r\n      rowSelect.push(<option disabled={requiredToWin > {i}} value={i}>{i}x{i}</option>);\r\n      console.log(rowSelect);\r\n    }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} rowColLength={rowColLength} requiredToWin={requiredToWin} blockedRule={blockedRule} />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          {/* Reverse the order of the list if descending order, as well. */}\r\n          <ol reversed={descMovesList}> {moves} </ol>\r\n          <ul> <li style={{ listStyleType: \"none\" }} onClick={() => toggleSort()}><button>Toggle list to {descMovesList ? \"ascending\" : \"descending\"} order.</button> </li> </ul>\r\n        </div>\r\n      </div>\r\n      <div className=\"game\">\r\n        <div>\r\n          <label htmlFor=\"rowColSelect\">Choose board size:</label>\r\n          <select className=\"dropDown\" id=\"rowColSelect\" defaultValue={3} onChange={() => changeBoardSize(parseInt(rowColSelect.value))}>\r\n            {rowSelect}\r\n          </select>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"reqToWinSelect\">Choose how many in a row to win:</label>\r\n          <select className=\"dropDown\" id=\"reqToWinSelect\" defaultValue={3} onChange={() => changeReqToWin(parseInt(reqToWinSelect.value))}>\r\n            <option value=\"3\">3</option>\r\n            <option disabled={4 > rowColLength} value=\"4\">4</option>\r\n            <option disabled={5 > rowColLength} value=\"5\">5</option>\r\n            <option disabled={6 > rowColLength} value=\"6\">6</option>\r\n            <option disabled={7 > rowColLength} value=\"7\">7</option>\r\n            <option disabled={8 > rowColLength} value=\"8\">8</option>\r\n            <option disabled={9 > rowColLength} value=\"9\">9</option>\r\n            <option disabled={10 > rowColLength} value=\"10\">10</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        <label><input type=\"checkbox\" defaultChecked={false} onChange={() => activateBlockedRule()}/>Blocked Rule (Co Caro)?</label>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction calculateWinner(squares, rowColLength, requiredToWin, blockedRule) {\r\n  // array that holds the winning lines (array positions)\r\n  const lines = [];\r\n  // array that holds one specific line that can win\r\n  let winningLine = []\r\n\r\n  // loop determines all row (horizontal) winning combinations\r\n  for (let i = 0; i < rowColLength ** 2; i++) {\r\n\r\n    winningLine.push(i);\r\n\r\n    // push a winning line to array if the array size is equal to how many positions are required to win\r\n    if (winningLine.length === requiredToWin) {\r\n      lines.push(winningLine);\r\n      winningLine = [];\r\n    }\r\n\r\n    // reset i if there are more winning combinations possible on a row\r\n    if (winningLine.length === 0 && (((i + 1) % rowColLength) != 0)) {\r\n      i -= (requiredToWin - 1);\r\n    }\r\n  }\r\n\r\n  winningLine = [];\r\n\r\n  // loop determines all column (vertical) winning combinations\r\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength) {\r\n\r\n    winningLine.push(i);\r\n\r\n\r\n    // push a winning line to array if the array size is equal to how many positions are required to win\r\n    if (winningLine.length === requiredToWin) {\r\n      lines.push(winningLine);\r\n      winningLine = [];\r\n    }\r\n\r\n    // reset i if there are more winning combinations possible on a row\r\n    if (winningLine.length === 0) {\r\n      i -= (rowColLength * requiredToWin) - 1;\r\n    }\r\n  }\r\n\r\n  winningLine = [];\r\n\r\n  // loop determines diagonal winning combinations from left to right\r\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength + 1) {\r\n\r\n    winningLine.push(i);\r\n\r\n    // push a winning line to array if the array size is equal to how many positions are required to win\r\n    if (winningLine.length === requiredToWin) {\r\n      lines.push(winningLine);\r\n      winningLine = [];\r\n    }\r\n\r\n    // if the next potential diagonal spot is actually 2 rows down (not in the diagonal) then give up on this diagonal\r\n    if (((Math.ceil((i + rowColLength + 2) / rowColLength) - Math.ceil((i + 1) / rowColLength)) > 1) && winningLine.length > 0) {\r\n      i = winningLine[0] + 1 - (rowColLength + 1);\r\n      winningLine = [];\r\n      continue;\r\n    }\r\n\r\n    // reset i to next starting square after successful diagonal found\r\n    if (winningLine.length === 0) {\r\n      i -= ((rowColLength + 1) * requiredToWin) - 1;\r\n    }\r\n  }\r\n\r\n  winningLine = [];\r\n\r\n  // loop determines diagonal winning combinations from right to left\r\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength - 1) {\r\n\r\n    winningLine.push(i);\r\n\r\n    // push a winning line to array if the array size is equal to how many positions are required to win\r\n    if (winningLine.length === requiredToWin) {\r\n      lines.push(winningLine);\r\n      winningLine = [];\r\n    }\r\n\r\n    // if the next potential diagonal spot is actually on the same row (not in the diagonal) then give up on this diagonal\r\n    if (((Math.ceil((i + rowColLength) / rowColLength) - Math.ceil((i + 1) / rowColLength)) < 1) && winningLine.length > 0) {\r\n      i = winningLine[0] + 1 - rowColLength + 1;\r\n      winningLine = [];\r\n      continue;\r\n    }\r\n\r\n    // reset i to next starting square after successful diagonal found\r\n    if (winningLine.length === 0) {\r\n      i -= ((rowColLength - 1) * requiredToWin) - 1;\r\n    }\r\n  }\r\n\r\n  // check win condition\r\n  let checkWinner = [];\r\n  // fill checkWinner array with squares (X/O) values of possible winning lines\r\n  for (let i = 0; i < lines.length; i++) {\r\n    for (let j = 0; j < lines[i].length; j++) {\r\n      if (squares[lines[i][j]]) {\r\n        checkWinner.push(squares[lines[i][j]]);\r\n      }\r\n    }\r\n    // count times X or O appears, and if 1 or the other is the required number to win, return which one wins\r\n    if ((checkWinner.filter(x => x === \"X\").length === requiredToWin || checkWinner.filter(x => x === \"O\").length === requiredToWin) && requiredToWin <= rowColLength) {\r\n      if (!blockedRule || !checkBlocked(lines[i], squares, rowColLength, requiredToWin)) {\r\n        return lines[i];\r\n      }\r\n    }\r\n    // reset checkWinner for the next line to check\r\n    checkWinner = [];\r\n  }\r\n\r\n  // if no winner, return null\r\n  return null;\r\n}\r\n\r\n// checks if both ends of a winning line are blocked by the opponent\r\nfunction checkBlocked(lines, squares, rowColLength, requiredToWin) {\r\n  // slice the array so we aren't mutating the original\r\n  let line = lines.slice();\r\n  // interval between all winning moves is equal; so the blocked positions will be on the same interval\r\n  let interval = line[1] - line[0];\r\n\r\n  // calculate what move the 2 blocking positions needs to be\r\n  let notWinner;\r\n  if (squares[line[0]] === \"X\") {\r\n    notWinner = \"O\";\r\n  } else {\r\n    notWinner = \"X\";\r\n  }\r\n\r\n  // add 2 blocking positions to the line\r\n  line.push(line[line.length - 1] + interval);\r\n  line.unshift(line[0] - interval);\r\n\r\n  // blocking cannot occur with invalid array positions or if the board isn't large enough, so return false\r\n  if (line[0] < 0 || line[line.length - 1] >= rowColLength ** 2 || rowColLength < (requiredToWin + 2)) {\r\n    return false;\r\n  }\r\n\r\n  // calculate row positions to make sure the blocking positions are in a continuous line with the winning line\r\n  let rowPos = [];\r\n  for (let i = 0; i < line.length; i++) {\r\n    rowPos.push(Math.ceil((line[i] + 1) / rowColLength));\r\n  }\r\n  // if the difference between rows is not consistent, it's not a straight line, so return false\r\n  let rowDiff = rowPos[2] - rowPos[1];\r\n  for (let i = 1; i < rowPos.length; i++) {\r\n    if (rowPos[i] - rowPos[i - 1] != rowDiff) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // return true if both blocking squares are owned by the opponent\r\n  if (squares[line[0]] === notWinner && squares[line[line.length - 1]] === notWinner) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}