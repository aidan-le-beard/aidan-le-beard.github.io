{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aidan\\\\Desktop\\\\React-Resizable-Tic-Tac-Toe-and-Co-Caro\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n/// Ideas\n/// 1) DONE make winning calculation not hardcoded to adjust board size (3x3, 4x4, 8x8...)\n/// 2) DONE and adjust how many in a row to win (3, 4, 5) to not be hardcoded\n/// 3) add toggles (drop down list?) to adjust board size / how many in a row to win\n/// 4) add co caro blocked rule?\n/// 5) DONE Display the location for each move in the format (row, col) in the move history list.\n/// 6) DONE When someone wins, highlight the X squares that caused the win\n\n// to use state\nimport { useState } from 'react';\n\n// takes \"props\" value and onSquareClick\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick,\n  winningColor\n}) {\n  // curly braces let us use javascript, inside the JSX\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    style: {\n      backgroundColor: winningColor\n    },\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 10\n  }, this);\n}\n_c = Square;\nfunction Board({\n  xIsNext,\n  squares,\n  onPlay,\n  rowColLength\n}) {\n  function handleClick(i) {\n    if (squares[i] || calculateWinner(squares, rowColLength)) {\n      return;\n    }\n    const nextSquares = squares.slice();\n    if (xIsNext) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    onPlay(nextSquares);\n  }\n  const winner = calculateWinner(squares, rowColLength);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + squares[winner[0]];\n\n    // Implement draw condition\n  } else if (!squares.includes(null) && rowColLength ** 2 == squares.length) {\n    status = \"The game is a draw.\";\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  // if there's a winner, matches the winning indices returned to the index sent on Square creation, and returns blue on match\n  function returnColor(i) {\n    if (winner && winner.includes(i)) {\n      return 'lightskyblue';\n    }\n    return;\n  }\n\n  // vars for storing div rows, and Square elements\n  let rowList = [];\n  let squareList = [];\n\n  // loop creates div rows and Square children by pushing to array vars, based on row/column size\n  for (let i = 0; i < rowColLength ** 2; i++) {\n    // push Square element to array of squares\n    squareList.push( /*#__PURE__*/_jsxDEV(Square, {\n      value: squares[i],\n      winningColor: returnColor(i),\n      onSquareClick: () => handleClick(i)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 21\n    }, this));\n    if ((i + 1) % rowColLength === 0 && i > 0) {\n      // when a full row is complete, push the squares as children to the div\n      rowList.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"board-row\",\n        children: squareList\n      }, (i + 1) / rowColLength, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 20\n      }, this));\n\n      // clear the array of squares for the next div/row\n      squareList = [];\n    }\n  }\n\n  // return our created row/board\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), rowList]\n  }, void 0, true);\n}\n_c2 = Board;\nexport default function Game() {\n  _s();\n  // var for storing row/col length\n  const [rowColLength, setRowColLength] = useState(3);\n  const [history, setHistory] = useState([Array(rowColLength ** 2).fill(null)]);\n  const [currentMove, setCurrentMove] = useState(0);\n  const xIsNext = currentMove % 2 === 0;\n  const currentSquares = history[currentMove];\n  const [descMovesList, setDescMovesList] = useState(0);\n  function handlePlay(nextSquares) {\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n  }\n\n  // button function. Changes current move.\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n  }\n\n  // button function. Reverses the order of moves.\n  function toggleSort() {\n    setDescMovesList(!descMovesList);\n  }\n  function changeBoardSize(value) {\n    setRowColLength(value);\n  }\n  const moves = history.map((squares, move) => {\n    let description;\n    let rowColPos = []; // holds the calculated [row, col] position of the move\n\n    if (move > 0) {\n      // loop finds out what position the move was made at by checking where the difference in the prior history array position is\n      for (let i = 0; i < history[move].length; i++) {\n        if (history[move][i] != history[move - 1][i]) {\n          // now that the position is found, calculate the row and column position\n          rowColPos.push(Math.ceil((i + 1) / rowColLength));\n          rowColPos.push(i % rowColLength + 1);\n          break;\n        }\n      }\n      description = 'Go to move #' + move + \" (\" + rowColPos[0] + \", \" + rowColPos[1] + \")\";\n    } else {\n      description = 'Go to game start';\n    }\n\n    // check if not the current move, and return a button to jump to that move, if not\n    if (move != currentMove) {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => jumpTo(move),\n          children: description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this)\n      }, move, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this);\n\n      // else, if it is the current move, show text that we are at the current move (or game start)\n    } else {\n      return (\n        /*#__PURE__*/\n        // put inline CSS styling to remove number from current position, and special condition for game start (move 0).\n        _jsxDEV(\"li\", {\n          style: {\n            listStyleType: \"none\"\n          },\n          children: [\"You are at \", currentMove == 0 ? \"game start.\" : \"move #\" + move + \" (\" + rowColPos[0] + \", \" + rowColPos[1] + \")\"]\n        }, move, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }, this)\n      );\n    }\n  });\n  if (descMovesList) {\n    moves.reverse();\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {\n          xIsNext: xIsNext,\n          squares: currentSquares,\n          onPlay: handlePlay,\n          rowColLength: rowColLength\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"ol\", {\n          reversed: descMovesList,\n          children: [\" \", moves, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"li\", {\n            style: {\n              listStyleType: \"none\"\n            },\n            onClick: () => toggleSort(),\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              children: [\"Toggle list to \", descMovesList ? \"ascending\" : \"descending\", \" order.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 83\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 16\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label1\",\n          for: \"rowColSelect\",\n          children: \"Choose board size:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"dropDown\",\n          id: \"rowColSelect\",\n          defaultValue: 3,\n          onChange: () => changeBoardSize(parseInt(rowColSelect.value)),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"3\",\n            children: \"3x3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"4\",\n            children: \"4x4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"5\",\n            children: \"5x5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"6\",\n            children: \"6x6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"select2\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          for: \"reqToWinSelect\",\n          children: \"Choose how many in a row to win:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          className: \"dropDown\",\n          id: \"reqToWinSelect\",\n          defaultValue: 3,\n          onChange: () => changeBoardSize(parseInt(rowColSelect.value)),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"3\",\n            children: \"3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"4\",\n            children: \"4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"5\",\n            children: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"6\",\n            children: \"6\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Game, \"6REG/5Dixi2EMWPMJyveRi1ep90=\");\n_c3 = Game;\nfunction calculateWinner(squares, rowColLength) {\n  // number of Xs/Os in a row required to win\n  let requiredToWin = 5;\n  // array that holds the winning lines (array positions)\n  const lines = [];\n  // array that holds one specific line that can win\n  let winningLine = [];\n\n  // loop determines all row (horizontal) winning combinations\n  for (let i = 0; i < rowColLength ** 2; i++) {\n    winningLine.push(i);\n\n    // push a winning line to array if the array size is equal to how many positions are required to win\n    if (winningLine.length === requiredToWin) {\n      lines.push(winningLine);\n      winningLine = [];\n    }\n\n    // reset i if there are more winning combinations possible on a row\n    if (winningLine.length === 0 && (i + 1) % rowColLength != 0) {\n      i -= requiredToWin - 1;\n    }\n  }\n  winningLine = [];\n\n  // loop determines all column (vertical) winning combinations\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength) {\n    winningLine.push(i);\n\n    // push a winning line to array if the array size is equal to how many positions are required to win\n    if (winningLine.length === requiredToWin) {\n      lines.push(winningLine);\n      winningLine = [];\n    }\n\n    // reset i if there are more winning combinations possible on a row\n    if (winningLine.length === 0) {\n      i -= rowColLength * requiredToWin - 1;\n    }\n  }\n  winningLine = [];\n\n  // loop determines diagonal winning combinations from left to right\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength + 1) {\n    winningLine.push(i);\n\n    // push a winning line to array if the array size is equal to how many positions are required to win\n    if (winningLine.length === requiredToWin) {\n      lines.push(winningLine);\n      winningLine = [];\n    }\n\n    // if the next potential diagonal spot is actually 2 rows down (not in the diagonal) then give up on this diagonal\n    if (Math.ceil((i + rowColLength + 2) / rowColLength) - Math.ceil((i + 1) / rowColLength) > 1 && winningLine.length > 0) {\n      i = winningLine[0] + 1 - (rowColLength + 1);\n      winningLine = [];\n      continue;\n    }\n\n    // reset i to next starting square after successful diagonal found\n    if (winningLine.length === 0) {\n      i -= (rowColLength + 1) * requiredToWin - 1;\n    }\n  }\n  winningLine = [];\n\n  // loop determines diagonal winning combinations from right to left\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength - 1) {\n    winningLine.push(i);\n\n    // push a winning line to array if the array size is equal to how many positions are required to win\n    if (winningLine.length === requiredToWin) {\n      lines.push(winningLine);\n      winningLine = [];\n    }\n\n    // if the next potential diagonal spot is actually on the same row (not in the diagonal) then give up on this diagonal\n    if (Math.ceil((i + rowColLength) / rowColLength) - Math.ceil((i + 1) / rowColLength) < 1 && winningLine.length > 0) {\n      i = winningLine[0] + 1 - rowColLength + 1;\n      winningLine = [];\n      continue;\n    }\n\n    // reset i to next starting square after successful diagonal found\n    if (winningLine.length === 0) {\n      i -= (rowColLength - 1) * requiredToWin - 1;\n    }\n  }\n  console.log(lines);\n\n  // check win condition\n  let checkWinner = [];\n  // fill checkWinner array with squares (X/O) values of possible winning lines\n  for (let i = 0; i < lines.length; i++) {\n    for (let j = 0; j < lines[i].length; j++) {\n      if (squares[lines[i][j]]) {\n        checkWinner.push(squares[lines[i][j]]);\n      }\n    }\n    // count times X or O appears, and if 1 or the other is the required number to win, return which one wins\n    if (checkWinner.filter(x => x === \"X\").length === requiredToWin || checkWinner.filter(x => x === \"O\").length === requiredToWin) {\n      return lines[i];\n    }\n    // reset checkWinner for the next line to check\n    checkWinner = [];\n  }\n\n  // if no winner, return null\n  return null;\n}\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","winningColor","className","style","backgroundColor","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xIsNext","squares","onPlay","rowColLength","handleClick","i","calculateWinner","nextSquares","slice","winner","status","includes","length","returnColor","rowList","squareList","push","_c2","Game","_s","setRowColLength","history","setHistory","Array","fill","currentMove","setCurrentMove","currentSquares","descMovesList","setDescMovesList","handlePlay","nextHistory","jumpTo","nextMove","toggleSort","changeBoardSize","moves","map","move","description","rowColPos","Math","ceil","listStyleType","reverse","reversed","for","id","defaultValue","onChange","parseInt","rowColSelect","_c3","requiredToWin","lines","winningLine","console","log","checkWinner","j","filter","x","$RefreshReg$"],"sources":["C:/Users/aidan/Desktop/React-Resizable-Tic-Tac-Toe-and-Co-Caro/my-app/src/App.js"],"sourcesContent":["/// Ideas\r\n/// 1) DONE make winning calculation not hardcoded to adjust board size (3x3, 4x4, 8x8...)\r\n/// 2) DONE and adjust how many in a row to win (3, 4, 5) to not be hardcoded\r\n/// 3) add toggles (drop down list?) to adjust board size / how many in a row to win\r\n/// 4) add co caro blocked rule?\r\n/// 5) DONE Display the location for each move in the format (row, col) in the move history list.\r\n/// 6) DONE When someone wins, highlight the X squares that caused the win\r\n\r\n// to use state\r\nimport { useState } from 'react';\r\n\r\n// takes \"props\" value and onSquareClick\r\nfunction Square({ value, onSquareClick, winningColor }) {\r\n\r\n  // curly braces let us use javascript, inside the JSX\r\n  return <button className=\"square\" style={{ backgroundColor: winningColor }} onClick={onSquareClick}>{value}</button>\r\n}\r\n\r\nfunction Board({ xIsNext, squares, onPlay, rowColLength }) {\r\n\r\n  function handleClick(i) {\r\n\r\n    if (squares[i] || calculateWinner(squares, rowColLength)) {\r\n      return;\r\n    }\r\n\r\n    const nextSquares = squares.slice();\r\n\r\n    if (xIsNext) {\r\n      nextSquares[i] = \"X\";\r\n    } else {\r\n      nextSquares[i] = \"O\";\r\n    }\r\n    onPlay(nextSquares);\r\n  }\r\n\r\n  const winner = calculateWinner(squares, rowColLength);\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + squares[winner[0]];\r\n\r\n    // Implement draw condition\r\n  } else if (!squares.includes(null) && rowColLength ** 2 == squares.length) {\r\n    status = \"The game is a draw.\";\r\n  } else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  // if there's a winner, matches the winning indices returned to the index sent on Square creation, and returns blue on match\r\n  function returnColor(i) {\r\n    if (winner && winner.includes(i)) {\r\n      return 'lightskyblue';\r\n    }\r\n    return;\r\n  }\r\n\r\n  // vars for storing div rows, and Square elements\r\n  let rowList = [];\r\n  let squareList = [];\r\n\r\n  // loop creates div rows and Square children by pushing to array vars, based on row/column size\r\n  for (let i = 0; i < rowColLength ** 2; i++) {\r\n\r\n    // push Square element to array of squares\r\n    squareList.push(<Square key={i} value={squares[i]} winningColor={returnColor(i)} onSquareClick={() => handleClick(i)} />);\r\n\r\n    if ((i + 1) % rowColLength === 0 && i > 0) {\r\n      // when a full row is complete, push the squares as children to the div\r\n      rowList.push(<div key={(i + 1) / rowColLength} className=\"board-row\">{squareList}</div>);\r\n\r\n      // clear the array of squares for the next div/row\r\n      squareList = [];\r\n    }\r\n  }\r\n\r\n  // return our created row/board\r\n  return (\r\n    <>\r\n      <div className=\"status\">{status}</div>\r\n      {rowList}\r\n    </>\r\n\r\n  );\r\n}\r\n\r\nexport default function Game() {\r\n\r\n  // var for storing row/col length\r\n  const [rowColLength, setRowColLength] = useState(3);\r\n  const [history, setHistory] = useState([Array(rowColLength ** 2).fill(null)]);\r\n  const [currentMove, setCurrentMove] = useState(0);\r\n  const xIsNext = currentMove % 2 === 0;\r\n  const currentSquares = history[currentMove];\r\n  const [descMovesList, setDescMovesList] = useState(0);\r\n\r\n  function handlePlay(nextSquares) {\r\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\r\n    setHistory(nextHistory);\r\n    setCurrentMove(nextHistory.length - 1);\r\n  }\r\n\r\n  // button function. Changes current move.\r\n  function jumpTo(nextMove) {\r\n    setCurrentMove(nextMove);\r\n  }\r\n\r\n  // button function. Reverses the order of moves.\r\n  function toggleSort() {\r\n    setDescMovesList(!descMovesList)\r\n  }\r\n\r\n  function changeBoardSize(value) {\r\n    setRowColLength(value);\r\n  }\r\n\r\n  const moves = history.map((squares, move) => {\r\n    let description;\r\n    let rowColPos = []; // holds the calculated [row, col] position of the move\r\n\r\n    if (move > 0) {\r\n\r\n      // loop finds out what position the move was made at by checking where the difference in the prior history array position is\r\n      for (let i = 0; i < history[move].length; i++) {\r\n        if (history[move][i] != history[move - 1][i]) {\r\n          // now that the position is found, calculate the row and column position\r\n          rowColPos.push(Math.ceil((i + 1) / rowColLength));\r\n          rowColPos.push((i % rowColLength) + 1);\r\n          break;\r\n        }\r\n      }\r\n\r\n      description = 'Go to move #' + move + \" (\" + rowColPos[0] + \", \" + rowColPos[1] + \")\";\r\n    } else {\r\n      description = 'Go to game start';\r\n    }\r\n\r\n    // check if not the current move, and return a button to jump to that move, if not\r\n    if (move != currentMove) {\r\n      return (\r\n        <li key={move}>\r\n          <button onClick={() => jumpTo(move)}>{description}</button>\r\n        </li>\r\n      );\r\n\r\n      // else, if it is the current move, show text that we are at the current move (or game start)\r\n    } else {\r\n      return (\r\n        // put inline CSS styling to remove number from current position, and special condition for game start (move 0).\r\n        <li key={move} style={{ listStyleType: \"none\" }}>You are at {currentMove == 0 ? \"game start.\" : \"move #\" + move + \" (\" + rowColPos[0] + \", \" + rowColPos[1] + \")\"}</li>\r\n      );\r\n    }\r\n  });\r\n\r\n  if (descMovesList) {\r\n    moves.reverse();\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} rowColLength={rowColLength} />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          {/* Reverse the order of the list if descending order, as well. */}\r\n          <ol reversed={descMovesList}> {moves} </ol>\r\n          <ul> <li style={{ listStyleType: \"none\" }} onClick={() => toggleSort()}><button>Toggle list to {descMovesList ? \"ascending\" : \"descending\"} order.</button> </li> </ul>\r\n        </div>\r\n      </div>\r\n      <div className=\"game\">\r\n      <div>\r\n        <label className=\"label1\" for=\"rowColSelect\">Choose board size:</label>\r\n        <select className=\"dropDown\" id=\"rowColSelect\" defaultValue={3} onChange={() => changeBoardSize(parseInt(rowColSelect.value))}>\r\n          <option value=\"3\">3x3</option>\r\n          <option value=\"4\">4x4</option>\r\n          <option value=\"5\">5x5</option>\r\n          <option value=\"6\">6x6</option>\r\n        </select>\r\n      </div>\r\n      <div className='select2'>\r\n        <label for=\"reqToWinSelect\">Choose how many in a row to win:</label>\r\n        <select className=\"dropDown\" id=\"reqToWinSelect\" defaultValue={3} onChange={() => changeBoardSize(parseInt(rowColSelect.value))}>\r\n          <option value=\"3\">3</option>\r\n          <option value=\"4\">4</option>\r\n          <option value=\"5\">5</option>\r\n          <option value=\"6\">6</option>\r\n        </select>\r\n      </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nfunction calculateWinner(squares, rowColLength) {\r\n  // number of Xs/Os in a row required to win\r\n  let requiredToWin = 5;\r\n  // array that holds the winning lines (array positions)\r\n  const lines = [];\r\n  // array that holds one specific line that can win\r\n  let winningLine = []\r\n\r\n  // loop determines all row (horizontal) winning combinations\r\n  for (let i = 0; i < rowColLength ** 2; i++) {\r\n\r\n    winningLine.push(i);\r\n\r\n    // push a winning line to array if the array size is equal to how many positions are required to win\r\n    if (winningLine.length === requiredToWin) {\r\n      lines.push(winningLine);\r\n      winningLine = [];\r\n    }\r\n\r\n    // reset i if there are more winning combinations possible on a row\r\n    if (winningLine.length === 0 && (((i + 1) % rowColLength) != 0)) {\r\n      i -= (requiredToWin - 1);\r\n    }\r\n  }\r\n\r\n  winningLine = [];\r\n\r\n  // loop determines all column (vertical) winning combinations\r\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength) {\r\n\r\n    winningLine.push(i);\r\n\r\n\r\n    // push a winning line to array if the array size is equal to how many positions are required to win\r\n    if (winningLine.length === requiredToWin) {\r\n      lines.push(winningLine);\r\n      winningLine = [];\r\n    }\r\n\r\n    // reset i if there are more winning combinations possible on a row\r\n    if (winningLine.length === 0) {\r\n      i -= (rowColLength * requiredToWin) - 1;\r\n    }\r\n  }\r\n\r\n  winningLine = [];\r\n\r\n  // loop determines diagonal winning combinations from left to right\r\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength + 1) {\r\n\r\n    winningLine.push(i);\r\n\r\n    // push a winning line to array if the array size is equal to how many positions are required to win\r\n    if (winningLine.length === requiredToWin) {\r\n      lines.push(winningLine);\r\n      winningLine = [];\r\n    }\r\n\r\n    // if the next potential diagonal spot is actually 2 rows down (not in the diagonal) then give up on this diagonal\r\n    if (((Math.ceil((i + rowColLength + 2) / rowColLength) - Math.ceil((i + 1) / rowColLength)) > 1) && winningLine.length > 0) {\r\n      i = winningLine[0] + 1 - (rowColLength + 1);\r\n      winningLine = [];\r\n      continue;\r\n    }\r\n\r\n    // reset i to next starting square after successful diagonal found\r\n    if (winningLine.length === 0) {\r\n      i -= ((rowColLength + 1) * requiredToWin) - 1;\r\n    }\r\n  }\r\n\r\n  winningLine = [];\r\n\r\n  // loop determines diagonal winning combinations from right to left\r\n  for (let i = 0; i < rowColLength ** 2; i += rowColLength - 1) {\r\n\r\n    winningLine.push(i);\r\n\r\n    // push a winning line to array if the array size is equal to how many positions are required to win\r\n    if (winningLine.length === requiredToWin) {\r\n      lines.push(winningLine);\r\n      winningLine = [];\r\n    }\r\n\r\n    // if the next potential diagonal spot is actually on the same row (not in the diagonal) then give up on this diagonal\r\n    if (((Math.ceil((i + rowColLength) / rowColLength) - Math.ceil((i + 1) / rowColLength)) < 1) && winningLine.length > 0) {\r\n      i = winningLine[0] + 1 - rowColLength + 1;\r\n      winningLine = [];\r\n      continue;\r\n    }\r\n\r\n    // reset i to next starting square after successful diagonal found\r\n    if (winningLine.length === 0) {\r\n      i -= ((rowColLength - 1) * requiredToWin) - 1;\r\n    }\r\n  }\r\n\r\n  console.log(lines);\r\n\r\n  // check win condition\r\n  let checkWinner = [];\r\n  // fill checkWinner array with squares (X/O) values of possible winning lines\r\n  for (let i = 0; i < lines.length; i++) {\r\n    for (let j = 0; j < lines[i].length; j++) {\r\n      if (squares[lines[i][j]]) {\r\n        checkWinner.push(squares[lines[i][j]]);\r\n      }\r\n    }\r\n    // count times X or O appears, and if 1 or the other is the required number to win, return which one wins\r\n    if (checkWinner.filter(x => x === \"X\").length === requiredToWin || checkWinner.filter(x => x === \"O\").length === requiredToWin) {\r\n      return lines[i];\r\n    }\r\n    // reset checkWinner for the next line to check\r\n    checkWinner = [];\r\n  }\r\n\r\n  // if no winner, return null\r\n  return null;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}